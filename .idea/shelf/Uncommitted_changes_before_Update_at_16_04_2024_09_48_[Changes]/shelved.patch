Index: column.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>//\r\n// Created by Aube on 29/03/2024.\r\n//\r\n\r\n#ifndef CDATAFRAMEL1_COLUMN_H\r\n#define CDATAFRAMEL1_COLUMN_H\r\n#define REALOC_SIZE 256\r\n\r\n#include <stdlib.h>\r\n\r\ntypedef struct{\r\n    char* title;\r\n    int* tab; //= (int*)malloc(REALOC_SIZE * sizeof(int));\r\n    int ls;//logical size\r\n    int ps; //physical size\r\n    // REALOC_SIZE;\r\n}COLUMN;\r\n\r\n\r\n/**\r\n* Create a column\r\n* @param1 : Column title\r\n* @return : Pointer to created column\r\n*/\r\nCOLUMN *create_column(char* title);\r\n\r\n/**\r\n* @brief : Add a new value to a column\r\n* @param1 : Pointer to a column\r\n* @param2 : The value to be added\r\n* @return : 1 if the value is added 0 otherwise\r\n*/\r\nint insert_value(COLUMN* col, int value);\r\n\r\n/**\r\n* @brief : Free allocated memory\r\n* @param1 : Pointer to a column\r\n*/\r\nvoid delete_column(COLUMN **col);\r\n\r\n/**\r\n* @brief: Print a column content\r\n* @param1: Pointer to a column\r\n*/\r\nvoid print_col(COLUMN* col);\r\n\r\n/**\r\n* @brief: Find the value on a given index\r\n* @param1: Pointer to a column\r\n* @param2: integer\r\n* @return: return the value\r\n*/\r\nint value_at_index(COLUMN* col, int index);\r\n\r\n\r\n\r\n#endif //CDATAFRAMEL1_COLUMN_H\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/column.h b/column.h
--- a/column.h	(revision cbc3cc96b1ae3e3ab60ca7e8063402beb6fd88b9)
+++ b/column.h	(date 1713250701548)
@@ -32,12 +32,6 @@
 */
 int insert_value(COLUMN* col, int value);
 
-/**
-* @brief : Free allocated memory
-* @param1 : Pointer to a column
-*/
-void delete_column(COLUMN **col);
-
 /**
 * @brief: Print a column content
 * @param1: Pointer to a column
@@ -52,6 +46,12 @@
 */
 int value_at_index(COLUMN* col, int index);
 
+/**
+* @brief: Delete a chosen line in the column
+* @param1: Pointer to a column
+* @param2: index of the line to delete
+*/
+void delete_line(COLUMN* col, int index);
 
 
 #endif //CDATAFRAMEL1_COLUMN_H
Index: cdataframe.c
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>//\r\n// Created by Aube on 29/03/2024.\r\n//\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include \"cdataframe.h\"\r\n\r\nvoid choose_title(char* title){\r\n    printf(\"Choose the title of the column:\");\r\n    scanf(\"%s\",title);\r\n}\r\n\r\nDATAFRAME* create_dataframe(int size){\r\n    DATAFRAME* dataframe = (DATAFRAME*)malloc(sizeof(DATAFRAME));\r\n\r\n    dataframe->col = (COLUMN*)malloc(size*sizeof(COLUMN));\r\n    dataframe->ps = size;\r\n    dataframe->ls = 0;\r\n    for(int i=0; i<size; i++){\r\n        char* title = (char *)malloc(size*sizeof(char));\r\n        choose_title(title);\r\n        dataframe->col[i] = create_column(title);\r\n        dataframe->ls ++;\r\n    }\r\n    return dataframe;\r\n}\r\n\r\nvoid fill_dataframe(DATAFRAME* dataframe){\r\n    for(int i = 0; i < dataframe->ls; i++){\r\n        int nbr_val;\r\n        printf(\"How many value do you want in the %s column\", dataframe->col[i]->title);\r\n        scanf(\"%d\", &nbr_val);\r\n        for(int j=0; j< nbr_val; j++){\r\n            int value;\r\n            printf(\"\\nEnter the value to insert: \");\r\n            scanf(\"%d\", &value);\r\n            insert_value(dataframe->col[i],value);\r\n        }\r\n    }\r\n}\r\n\r\nvoid hard_fill_dataframe(DATAFRAME * dataframe){\r\n    for(int i = 0; i < dataframe->ls; i++){\r\n        int nbr_val = 5;\r\n        for(int j=0; j< nbr_val; j++){;\r\n            insert_value(dataframe->col[i],j);\r\n        }\r\n    }\r\n}\r\n/*\r\nint still_in_frame(DATAFRAME* dataframe;int i){\r\n    int bool = 0;\r\n    for(int j = 0; j < dataframe->ls; j++){\r\n\r\n    }\r\n}\r\n*/\r\nint longest_col(DATAFRAME* dataframe){\r\n    int max=0;\r\n    for(int i=0; i<dataframe->ls;i++){\r\n        if (dataframe->col[i]->ls> max){\r\n            max = dataframe->col[i]->ls;\r\n        }\r\n    }\r\n    return max;\r\n}\r\n\r\nvoid display_dataframe(DATAFRAME* dataframe, int nb_lines, int nb_col){\r\n    // if the user want to display all the dataframe\r\n    if (nb_lines==0){\r\n        //the number of lines to print is the logical size of longest column\r\n        nb_lines = longest_col(dataframe);\r\n    }\r\n    if (nb_col==0){\r\n        nb_col = dataframe->ls;\r\n    }\r\n    //display titles\r\n    for(int i = 0; i < nb_col; i++) {\r\n        printf(\"%s\\t\", dataframe->col[i]->title);\r\n    }\r\n    printf(\"\\n\");\r\n    //display values with index\r\n    for(int i = 0; i < nb_lines; i++) {\r\n        for(int j = 0;j < nb_col; j++) {\r\n            printf(\"[%d] %d\\t\", i, dataframe->col[j]->tab[i]);\r\n\r\n        }\r\n        printf(\"\\n\");\r\n    }\r\n    printf(\"\\n\");\r\n}\r\n\r\nint valid_input(int val){\r\n    int choice=0, type;\r\n    do{\r\n        printf(\"\\nChoose a value between 1 and %d: \", val);\r\n        type = scanf(\"%d\",&choice);//if the type is int type=1\r\n        if (type != 1 || choice < 1 || choice > val) {\r\n            printf(\"Invalid input.\");\r\n            while (getchar() != '\\n'); // to clear out the input buffer\r\n        }\r\n\r\n    }while (type!=1||(choice > val) || (choice<1));\r\n    return choice;\r\n}\r\n\r\nDATAFRAME* is_dataframe(DATAFRAME* dataframe){\r\n    if (dataframe ==NULL){\r\n        printf(\"Let's first create a dataframe: \");\r\n        int phys_size;\r\n        printf(\"How many columns do you want in the Dataframe? (max %d)\", REALOC_SIZE);\r\n        phys_size = valid_input(REALOC_SIZE);\r\n        dataframe = create_dataframe(phys_size);\r\n    }\r\n    return dataframe;\r\n}\r\n\r\nint input_number(){\r\n    int choice=0, type;\r\n    do{\r\n        printf(\"\\nChoose a value:\");\r\n        type = scanf(\"%d\",&choice);//if the type is int type=1\r\n        if (type != 1) {\r\n            printf(\"Invalid input.\");\r\n            while (getchar() != '\\n'); // to clear out the input buffer\r\n        }\r\n    }while (type!=1);\r\n    return choice;\r\n\r\n}\r\nint equal(DATAFRAME* dataframe, int value){\r\n    int cpt=0;\r\n    for(int i =0; i<dataframe->ls; i++){\r\n        for(int j=0; j<dataframe->col[i]->ls; j++){\r\n            if(dataframe->col[i]->tab[j]==value){\r\n                cpt++;\r\n            }\r\n        }\r\n    }\r\n\r\n    return cpt;\r\n}\r\n\r\nint greater(DATAFRAME* dataframe, int value){\r\n    int cpt=0;\r\n    for(int i =0; i<dataframe->ls; i++){\r\n        for(int j=0; j<dataframe->col[i]->ls; j++){\r\n            if(dataframe->col[i]->tab[j]>value){\r\n                cpt++;\r\n            }\r\n        }\r\n    }\r\n    return cpt;\r\n}\r\nint smaller(DATAFRAME* dataframe, int value){\r\n    int cpt=0;\r\n    for(int i =0; i<dataframe->ls; i++){\r\n        for(int j=0; j<dataframe->col[i]->ls; j++){\r\n            if(dataframe->col[i]->tab[j]<value){\r\n                cpt++;\r\n            }\r\n        }\r\n    }\r\n    return cpt;\r\n}\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/cdataframe.c b/cdataframe.c
--- a/cdataframe.c	(revision cbc3cc96b1ae3e3ab60ca7e8063402beb6fd88b9)
+++ b/cdataframe.c	(date 1713251393294)
@@ -83,24 +83,24 @@
     for(int i = 0; i < nb_lines; i++) {
         for(int j = 0;j < nb_col; j++) {
             printf("[%d] %d\t", i, dataframe->col[j]->tab[i]);
-
+        //display 0 if no chosen value bc the col is fill with 0 with the dynamic allocation
         }
         printf("\n");
     }
     printf("\n");
 }
 
-int valid_input(int val){
+int valid_input(int lower_bound, int upper_bound){
     int choice=0, type;
     do{
-        printf("\nChoose a value between 1 and %d: ", val);
+        printf("\nChoose a value between %d and %d: ", lower_bound, upper_bound);
         type = scanf("%d",&choice);//if the type is int type=1
-        if (type != 1 || choice < 1 || choice > val) {
+        if (type != 1 || choice < lower_bound || choice > upper_bound) {
             printf("Invalid input.");
             while (getchar() != '\n'); // to clear out the input buffer
         }
 
-    }while (type!=1||(choice > val) || (choice<1));
+    }while (type!=1|| choice > upper_bound || choice<lower_bound);
     return choice;
 }
 
@@ -109,7 +109,7 @@
         printf("Let's first create a dataframe: ");
         int phys_size;
         printf("How many columns do you want in the Dataframe? (max %d)", REALOC_SIZE);
-        phys_size = valid_input(REALOC_SIZE);
+        phys_size = valid_input(1,REALOC_SIZE);
         dataframe = create_dataframe(phys_size);
     }
     return dataframe;
@@ -126,8 +126,8 @@
         }
     }while (type!=1);
     return choice;
-
 }
+
 int equal(DATAFRAME* dataframe, int value){
     int cpt=0;
     for(int i =0; i<dataframe->ls; i++){
@@ -164,4 +164,21 @@
     return cpt;
 }
 
+void add_line_dataframe(DATAFRAME* dataframe){
+    int val = 0;
+    for(int i = 0; i<dataframe->ls; i++){
+        val = input_number();
+        insert_value(dataframe->col[i],val);
+    }
+}
+
+void delete_line_dataframe(DATAFRAME* dataframe){
+    int line =0;
+    printf("\nWhich line do you want to delete?");
+    line = valid_input(0,longest_col(dataframe));
+    for(int i = 0; i<dataframe->ls; i++){
+        delete_line(dataframe->col[i], line);
+    }
+}
+
 
Index: cdataframe.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>//\r\n// Created by Aube on 29/03/2024.\r\n//\r\n\r\n#ifndef CDATAFRAMEL1_CDATAFRAME_H\r\n#define CDATAFRAMEL1_CDATAFRAME_H\r\n#include \"column.h\"\r\n\r\ntypedef struct{\r\n    COLUMN** col;\r\n    int ls;\r\n    int ps;\r\n}DATAFRAME;\r\n\r\n/**\r\n * Create a dataframe\r\n * @param1 : Pointer on column\r\n * @size of the list\r\n */\r\nDATAFRAME* create_dataframe(int size);\r\n/**\r\n * Allow the user to choose a title\r\n * @param1 : Pointer on the title\r\n */\r\nvoid choose_title(char* title);\r\n\r\n/**\r\n * Allow the user to fill the dataframe\r\n * @param1 : dataframe to fill\r\n */\r\nvoid fill_dataframe(DATAFRAME* dataframe);\r\n\r\n/**\r\n * Hard fill the dataframe\r\n * @param1 : dataframe to fill\r\n */\r\nvoid hard_fill_dataframe(DATAFRAME* dataframe);\r\n\r\n/**\r\n * Display the dataframe\r\n * @param1 : pointer on dataframe to display\r\n * @param2 : integer that give the number of lines to print\r\n * @param3 : integer that give the number of column to print\r\n */\r\nvoid display_dataframe(DATAFRAME* dataframe, int nb_lines, int nb_col);\r\n\r\n/**\r\n * Allow to enter a value between 0 and val\r\n * @param1 : val upper bound\r\n */\r\nint valid_input(int val);\r\n/**\r\n * Find the column with the highest number of value\r\n * @param1 : pointer on the dataframe\r\n * @return : integer that is the nb of lines of the dataframe\r\n */\r\nint longest_col(DATAFRAME* dataframe);\r\n\r\nint input_number();\r\n/**\r\n * Create a dataframe if the dataframe is NULL\r\n * @param1 : pointer on the dataframe to check\r\n */\r\nDATAFRAME* is_dataframe(DATAFRAME* dataframe);\r\n\r\n/**\r\n* @brief: Find how many cells are either equal to a given value in the dataframe\r\n* @param1: Pointer to the dataframe\r\n* @param2: integer to compare other values with\r\n* @return: return the number of value equal to @param2\r\n*/\r\nint equal(DATAFRAME* dataframe, int value);\r\n\r\n/**\r\n* @brief: Find how many cells are either greater than a given value in the dataframe\r\n* @param1: Pointer to the dataframe\r\n* @param2: integer to compare other values with\r\n* @return: return the number of value greater than @param2\r\n*/\r\nint greater(DATAFRAME* dataframe, int value);\r\n/**\r\n* @brief: Find how many cells are either smaller than a given value in the dataframe\r\n* @param1: Pointer to the dataframe\r\n* @param2: integer to compare other values with\r\n* @return: return the number of value smaller than @param2\r\n*/\r\nint smaller(DATAFRAME* dataframe, int value);\r\n\r\n\r\n\r\n\r\n#endif //CDATAFRAMEL1_CDATAFRAME_H\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/cdataframe.h b/cdataframe.h
--- a/cdataframe.h	(revision cbc3cc96b1ae3e3ab60ca7e8063402beb6fd88b9)
+++ b/cdataframe.h	(date 1713250955135)
@@ -45,10 +45,12 @@
 void display_dataframe(DATAFRAME* dataframe, int nb_lines, int nb_col);
 
 /**
- * Allow to enter a value between 0 and val
- * @param1 : val upper bound
+ * Allow to enter an integer between 0 and val
+ * @param1 : lowest value that the user can choose
+ * @param2 : highest value that the user can choose
+ * @return : an integer
  */
-int valid_input(int val);
+int valid_input(int lower_bound, int upper_bound);
 /**
  * Find the column with the highest number of value
  * @param1 : pointer on the dataframe
@@ -56,6 +58,11 @@
  */
 int longest_col(DATAFRAME* dataframe);
 
+/**
+ * Allow to enter an integer value
+ * @param1 : val upper bound
+ * @return : an integer
+ */
 int input_number();
 /**
  * Create a dataframe if the dataframe is NULL
@@ -86,7 +93,13 @@
 */
 int smaller(DATAFRAME* dataframe, int value);
 
+void add_line_dataframe(DATAFRAME* dataframe);
 
+/**
+* @brief: Delete a chosen line in the dataframe
+* @param1: Pointer to the dataframe
+*/
+void delete_line_dataframe(DATAFRAME* dataframe);
 
 
 #endif //CDATAFRAMEL1_CDATAFRAME_H
Index: main.c
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\n#include \"column.h\"\r\n#include \"cdataframe.h\"\r\n\r\n\r\nint main(){\r\n    /*\r\n    COLUMN *mycol = create_column(\"My column\");\r\n    insert_value(mycol, 52);\r\n    insert_value(mycol, 44);\r\n    insert_value(mycol, 15);\r\n    print_col(mycol);\r\n    delete_column(&mycol);\r\n    */\r\n    int choice = 0;\r\n    DATAFRAME* dataframe=NULL;\r\n    do {\r\n        printf(\"1. Filling\\n2. Displaying\\n3. Usual operations \\n4. Analysis and statistics\\n5. Exit\\n\");\r\n        choice = valid_input(5);\r\n        switch (choice) {\r\n            case 1: {\r\n                printf(\"1.Creation of an empty CDataframe \\n2. Filling in the CDataframe with an input \\n3. Hard filling of the CDataframe\\n\");\r\n                choice = valid_input(3);\r\n                switch (choice) {\r\n                    case 1://Creation of an empty CDataframe\r\n                    {\r\n                        int phys_size;\r\n                        printf(\"How many columns do you want in the Dataframe? (max %d)\", REALOC_SIZE);\r\n                        phys_size = valid_input(REALOC_SIZE);\r\n                        dataframe = create_dataframe(phys_size);\r\n                        break;\r\n                    }\r\n                    case 2: // Filling in the CDataframe with an input\r\n                    {\r\n                        is_dataframe(dataframe);//check if the dataframe has allocated memory\r\n                        fill_dataframe(dataframe);\r\n                        break;\r\n                    }\r\n                    case 3: // Hard filling of the CDataframe\r\n                    {\r\n                        dataframe = is_dataframe(dataframe);\r\n                        hard_fill_dataframe(dataframe);\r\n                        break;\r\n                    }\r\n\r\n                }\r\n                break;\r\n            }\r\n            case 2: {\r\n                printf(\"1.Display the entire CDataframe \\n2.Display a part of the CDataframe rows according to a chosen limit\\n3. Display a part of the columns of the CDataframe according to a limit supplied by the user\\n\");\r\n                choice = valid_input(3);\r\n                switch (choice) {\r\n                    case 1: // Display the entire CDataframe\r\n                    {\r\n                        display_dataframe(dataframe, 0,0);\r\n                        break;\r\n                    }\r\n                    case 2: // Display a part of the CDataframe rows according to a chosen limit\r\n                    {\r\n                        int nb_lines = 0;\r\n                        printf(\"How many lines do you want to display?\");\r\n                        nb_lines = valid_input(longest_col(dataframe));\r\n                        display_dataframe(dataframe, nb_lines, 0);\r\n                        break;\r\n                    }\r\n                    case 3: // Display a part of the columns of the CDataframe according to a limit supplied by the user\r\n                    {\r\n                        int nb_col = 0;\r\n                        printf(\"How many columns do you want to display?\");\r\n                        nb_col = valid_input(longest_col(dataframe));\r\n                        display_dataframe(dataframe, 0, nb_col);\r\n                        break;\r\n                    }\r\n\r\n                }\r\n                break;\r\n            }\r\n            case 3: {\r\n                printf(\"1. Add a row of values to the CDataframe\\n2. Delete a row of values from the CDataframe\\n3. Add a column to the CDataframe\"\r\n                       \" \\n4. Delete a column from the CDataframe\\n5. Rename the title of a column in the CDataframe \\n6. • Check the existence of a value (search) in the CDataframe\"\r\n                       \"\\n7. Access/replace the value in a CDataframe cell using its row and column number\\n8. Display column names\");\r\n                choice = valid_input(8);\r\n                switch (choice) {\r\n                    case 1: // Add a row of values to the CDataframe\r\n                    {\r\n                        //action\r\n                        break;\r\n                    }\r\n                    case 2: // Delete a row of values from the CDataframe\r\n                    {\r\n                        //action\r\n                        break;\r\n                    }\r\n                    case 3: // Delete a row of values from the CDataframese 3:\r\n                    {\r\n                        //action\r\n                        break;\r\n                    }\r\n                    case 4: // Delete a column from the CDataframe\r\n                    {\r\n                        //action\r\n                        break;\r\n                    }\r\n                    case 5: // Rename the title of a column in the CDataframe\r\n                    {\r\n                        //action\r\n                        break;\r\n                    }\r\n                    case 6: // Check the existence of a value (search) in the CDataframe\r\n                    {\r\n                        //action\r\n                        break;\r\n                    }\r\n                    case 7: // Access/replace the value in a CDataframe cell using its row and column number\r\n                    {\r\n                        //action\r\n                        break;\r\n                    }\r\n                    case 8: // Display column names\r\n                    {\r\n                        //action\r\n                        break;\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case 4: {\r\n                printf(\"1. Display the number of rows\\n2. Display the number of columns\\n3. Display the number of cells equal to a chosen value\"\r\n                       \" \\n4. Display the number of cells containing a value greater than a chosen value\\n5. Display the number of cells containing a value less than a chosen value \\n\");\r\n                choice = valid_input(8);\r\n                switch (choice) {\r\n                    case 1: // Display the number of rows\r\n                    {\r\n                        printf(\"There are %d rows in the dataframe.\\n\", longest_col(dataframe));\r\n                        break;\r\n                    }\r\n                    case 2: // Display the number of columns\r\n                    {\r\n                        printf(\"There are %d columns in the dataframe.\\n\", dataframe->ls);\r\n                        break;\r\n                    }\r\n                    case 3: // Display the number of cells equal to x (x given as parameter)\r\n                    {\r\n                        int value =0, cpt=0;\r\n                        value = input_number();\r\n                        if (cpt = equal(dataframe, value)){// return 1 if value is in the dataframe\r\n                            printf(\"There are %d cells with the value %d.\\n\", cpt, value);\r\n                        }\r\n                        else{\r\n                            printf(\"The value %d is not in the dataframe.\");\r\n                        }\r\n                        break;\r\n                    }\r\n                    case 4: // Display the number of cells containing a value greater than a chosen value\r\n                    {\r\n                        int value =0;\r\n                        value = input_number();\r\n                        printf(\"There are %d cells with greater values than %d.\\n\",greater(dataframe, value), value);\r\n                        break;\r\n                    }\r\n                    case 5: // Display the number of cells containing a value less than a chosen value\r\n                    {\r\n                        int value =0;\r\n                        value = input_number();\r\n                        printf(\"There are %d cells with smaller values than %d.\\n\",smaller(dataframe, value), value);\r\n                        break;\r\n                    }\r\n\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }while(choice !=5);\r\n\r\n    return 0;\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.c b/main.c
--- a/main.c	(revision cbc3cc96b1ae3e3ab60ca7e8063402beb6fd88b9)
+++ b/main.c	(date 1713251847731)
@@ -4,7 +4,6 @@
 #include "column.h"
 #include "cdataframe.h"
 
-
 int main(){
     /*
     COLUMN *mycol = create_column("My column");
@@ -17,24 +16,35 @@
     int choice = 0;
     DATAFRAME* dataframe=NULL;
     do {
+        printf("-- Principal menu --\n");
         printf("1. Filling\n2. Displaying\n3. Usual operations \n4. Analysis and statistics\n5. Exit\n");
-        choice = valid_input(5);
+        choice = valid_input(1,5);
+        if (choice !=1 && dataframe==NULL){
+            choice = 0;
+        }
         switch (choice) {
+            case 0:{ //if the dataframe has no memory and the user choose 2,3 or 4 in the menu
+                printf("You must create a dataframe first.\n");
+                break;
+            }
             case 1: {
-                printf("1.Creation of an empty CDataframe \n2. Filling in the CDataframe with an input \n3. Hard filling of the CDataframe\n");
-                choice = valid_input(3);
+                printf("0.Go back to the principal menu\n1.Creation of an empty CDataframe \n2. Filling in the CDataframe with an input \n3. Hard filling of the CDataframe\n");
+                choice = valid_input(0,3);
                 switch (choice) {
+                    case 0:{
+                        break;
+                    }
                     case 1://Creation of an empty CDataframe
                     {
                         int phys_size;
                         printf("How many columns do you want in the Dataframe? (max %d)", REALOC_SIZE);
-                        phys_size = valid_input(REALOC_SIZE);
+                        phys_size = valid_input(1,REALOC_SIZE);
                         dataframe = create_dataframe(phys_size);
                         break;
                     }
                     case 2: // Filling in the CDataframe with an input
                     {
-                        is_dataframe(dataframe);//check if the dataframe has allocated memory
+                        dataframe = is_dataframe(dataframe);//check if the dataframe has allocated memory
                         fill_dataframe(dataframe);
                         break;
                     }
@@ -50,7 +60,7 @@
             }
             case 2: {
                 printf("1.Display the entire CDataframe \n2.Display a part of the CDataframe rows according to a chosen limit\n3. Display a part of the columns of the CDataframe according to a limit supplied by the user\n");
-                choice = valid_input(3);
+                choice = valid_input(1,3);
                 switch (choice) {
                     case 1: // Display the entire CDataframe
                     {
@@ -61,7 +71,7 @@
                     {
                         int nb_lines = 0;
                         printf("How many lines do you want to display?");
-                        nb_lines = valid_input(longest_col(dataframe));
+                        nb_lines = valid_input(1,longest_col(dataframe));
                         display_dataframe(dataframe, nb_lines, 0);
                         break;
                     }
@@ -69,7 +79,7 @@
                     {
                         int nb_col = 0;
                         printf("How many columns do you want to display?");
-                        nb_col = valid_input(longest_col(dataframe));
+                        nb_col = valid_input(1,longest_col(dataframe));
                         display_dataframe(dataframe, 0, nb_col);
                         break;
                     }
@@ -81,16 +91,16 @@
                 printf("1. Add a row of values to the CDataframe\n2. Delete a row of values from the CDataframe\n3. Add a column to the CDataframe"
                        " \n4. Delete a column from the CDataframe\n5. Rename the title of a column in the CDataframe \n6. • Check the existence of a value (search) in the CDataframe"
                        "\n7. Access/replace the value in a CDataframe cell using its row and column number\n8. Display column names");
-                choice = valid_input(8);
+                choice = valid_input(1,8);
                 switch (choice) {
                     case 1: // Add a row of values to the CDataframe
                     {
-                        //action
+                        add_line_dataframe(dataframe);
                         break;
                     }
                     case 2: // Delete a row of values from the CDataframe
                     {
-                        //action
+                        delete_line_dataframe(dataframe);
                         break;
                     }
                     case 3: // Delete a row of values from the CDataframese 3:
@@ -129,7 +139,7 @@
             case 4: {
                 printf("1. Display the number of rows\n2. Display the number of columns\n3. Display the number of cells equal to a chosen value"
                        " \n4. Display the number of cells containing a value greater than a chosen value\n5. Display the number of cells containing a value less than a chosen value \n");
-                choice = valid_input(8);
+                choice = valid_input(1,8);
                 switch (choice) {
                     case 1: // Display the number of rows
                     {
@@ -145,7 +155,7 @@
                     {
                         int value =0, cpt=0;
                         value = input_number();
-                        if (cpt = equal(dataframe, value)){// return 1 if value is in the dataframe
+                        if (cpt == equal(dataframe, value)){// return 1 if value is in the dataframe
                             printf("There are %d cells with the value %d.\n", cpt, value);
                         }
                         else{
Index: column.c
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>//\r\n// Created by Aube on 29/03/2024.\r\n//\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include \"column.h\"\r\n\r\n\r\n\r\nCOLUMN *create_column(char* title){\r\n    COLUMN *column = malloc (sizeof(COLUMN));\r\n    column->tab = NULL;\r\n    column->title = title;\r\n    column->ls = 0;\r\n    column->ps = 0;\r\n    return column;\r\n}\r\n\r\nint insert_value(COLUMN* col, int val){\r\n    int success = 0;\r\n    if(col->ls == col->ps){\r\n        if(col->ps==0){\r\n            col->tab = (int*)malloc(REALOC_SIZE * sizeof(int));\r\n        }else{\r\n            int* new;\r\n            new = realloc(col->tab,REALOC_SIZE * sizeof(int));\r\n            if (new != NULL){\r\n                free(col->tab);\r\n                col->tab = new;\r\n                success = 1;\r\n            }\r\n        }\r\n    }\r\n    if(col->tab != NULL || success){\r\n        col->tab[col->ls] = val;\r\n        col-> ls = col->ls+1;\r\n        return 1;\r\n    }\r\n    return 0;\r\n}\r\n\r\nvoid delete_column(COLUMN **col){\r\n    free(*col);\r\n}\r\n\r\nvoid print_col(COLUMN* col){\r\n    printf(\"%s\\n\", col->title);\r\n    for(int i=0; i<col->ls; i++){\r\n        printf(\"[%d] %d\\n\", i,col->tab[i]);\r\n    }\r\n}\r\n\r\nint value_at_index(COLUMN* col, int index){\r\n    return col->tab[index];\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/column.c b/column.c
--- a/column.c	(revision cbc3cc96b1ae3e3ab60ca7e8063402beb6fd88b9)
+++ b/column.c	(date 1713250575406)
@@ -39,10 +39,6 @@
     return 0;
 }
 
-void delete_column(COLUMN **col){
-    free(*col);
-}
-
 void print_col(COLUMN* col){
     printf("%s\n", col->title);
     for(int i=0; i<col->ls; i++){
@@ -54,7 +50,14 @@
     return col->tab[index];
 }
 
-
+void delete_line(COLUMN* col, int index){
+    int i=0;
+    for(i=index; i<(col->ls)-1; i++){
+        col->tab[i] = col->tab[i+1];
+    }
+    free((void *) col->tab[i + 1]);
+    col->ls--;
+}
 
 
 
